/// <reference types="node" />
import { MonitorClient } from '@openzeppelin/defender-sdk-monitor-client';
import { ActionClient } from '@openzeppelin/defender-sdk-action-client';
import { RelayClient } from '@openzeppelin/defender-sdk-relay-client';
import { ProposalClient } from '@openzeppelin/defender-sdk-proposal-client';
import { DeployClient } from '@openzeppelin/defender-sdk-deploy-client';
import { NotificationChannelClient } from '@openzeppelin/defender-sdk-notification-channel-client';
import { NetworkClient } from '@openzeppelin/defender-sdk-network-client';
import { AccountClient } from '@openzeppelin/defender-sdk-account-client';
import { ApprovalProcessClient } from '@openzeppelin/defender-sdk-approval-process-client';
import { RelayGroupClient } from '@openzeppelin/defender-sdk-relay-group-client';
import { KeyValueStoreClient, LocalKeyValueStoreCreateParams } from '@openzeppelin/defender-sdk-key-value-store-client';
import { AddressBookClient } from '@openzeppelin/defender-sdk-address-book-client';
import { ActionRelayerParams, Relayer as RelaySignerClient } from '@openzeppelin/defender-sdk-relay-signer-client';
import { ListNetworkRequestOptions, NetworkDefinition } from '@openzeppelin/defender-sdk-network-client/lib/models/networks';
import { Network, RetryConfig } from '@openzeppelin/defender-sdk-base-client';
import https from 'https';
export interface DefenderOptions {
    apiKey?: string;
    apiSecret?: string;
    relayerApiKey?: string;
    relayerApiSecret?: string;
    credentials?: ActionRelayerParams;
    relayerARN?: string;
    httpsAgent?: https.Agent;
    retryConfig?: RetryConfig;
    useCredentialsCaching?: boolean;
    kvstoreARN?: string;
}
export declare class Defender {
    private apiKey;
    private apiSecret;
    private relayerApiKey;
    private relayerApiSecret;
    private actionCredentials;
    private actionRelayerArn;
    private actionKVStoreArn;
    private httpsAgent?;
    private retryConfig?;
    private authConfig?;
    constructor(options: DefenderOptions);
    networks(params: ListNetworkRequestOptions & {
        includeDefinition: true;
    }): Promise<NetworkDefinition[]>;
    networks(params?: ListNetworkRequestOptions & {
        includeDefinition?: false;
    }): Promise<Network[]>;
    get network(): NetworkClient;
    get account(): AccountClient;
    get approvalProcess(): ApprovalProcessClient;
    get monitor(): MonitorClient;
    get action(): ActionClient;
    get relay(): RelayClient;
    get relayGroup(): RelayGroupClient;
    get proposal(): ProposalClient;
    get deploy(): DeployClient;
    get notificationChannel(): NotificationChannelClient;
    get relaySigner(): RelaySignerClient;
    get addressBook(): AddressBookClient;
    get keyValueStore(): KeyValueStoreClient;
    static localKVStoreClient(params: LocalKeyValueStoreCreateParams): KeyValueStoreClient;
}
//# sourceMappingURL=index.d.ts.map