"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Defender = void 0;
const defender_sdk_monitor_client_1 = require("@openzeppelin/defender-sdk-monitor-client");
const defender_sdk_action_client_1 = require("@openzeppelin/defender-sdk-action-client");
const defender_sdk_relay_client_1 = require("@openzeppelin/defender-sdk-relay-client");
const defender_sdk_proposal_client_1 = require("@openzeppelin/defender-sdk-proposal-client");
const defender_sdk_deploy_client_1 = require("@openzeppelin/defender-sdk-deploy-client");
const defender_sdk_notification_channel_client_1 = require("@openzeppelin/defender-sdk-notification-channel-client");
const defender_sdk_network_client_1 = require("@openzeppelin/defender-sdk-network-client");
const defender_sdk_account_client_1 = require("@openzeppelin/defender-sdk-account-client");
const defender_sdk_approval_process_client_1 = require("@openzeppelin/defender-sdk-approval-process-client");
const defender_sdk_relay_group_client_1 = require("@openzeppelin/defender-sdk-relay-group-client");
const defender_sdk_key_value_store_client_1 = require("@openzeppelin/defender-sdk-key-value-store-client");
const defender_sdk_address_book_client_1 = require("@openzeppelin/defender-sdk-address-book-client");
const defender_sdk_relay_signer_client_1 = require("@openzeppelin/defender-sdk-relay-signer-client");
const utils_1 = require("./utils");
function getClient(Client, credentials) {
    if (!(0, utils_1.isActionRelayerCredentials)(credentials) &&
        !(0, utils_1.isApiCredentials)(credentials) &&
        !(0, utils_1.isActionKVStoreCredentials)(credentials)) {
        throw new Error(`API key and secret are required`);
    }
    return new Client(credentials);
}
class Defender {
    constructor(options) {
        this.apiKey = options.apiKey;
        this.apiSecret = options.apiSecret;
        this.relayerApiKey = options.relayerApiKey;
        this.relayerApiSecret = options.relayerApiSecret;
        // support for using relaySigner from Defender Actions
        this.actionCredentials = options.credentials;
        this.actionRelayerArn = options.relayerARN;
        this.actionKVStoreArn = options.kvstoreARN;
        this.httpsAgent = options.httpsAgent;
        this.retryConfig = options.retryConfig;
        this.authConfig = {
            useCredentialsCaching: options.useCredentialsCaching ?? true,
            type: (0, utils_1.isRelaySignerOptions)(options) ? 'relay' : 'admin',
        };
    }
    networks(opts = {}) {
        const client = getClient(defender_sdk_network_client_1.NetworkClient, {
            apiKey: this.apiKey,
            apiSecret: this.apiSecret,
            httpsAgent: this.httpsAgent,
            retryConfig: this.retryConfig,
            authConfig: this.authConfig,
        });
        return opts.includeDefinition
            ? client.listSupportedNetworks({ ...opts, includeDefinition: true })
            : client.listSupportedNetworks({ ...opts, includeDefinition: false });
    }
    get network() {
        return getClient(defender_sdk_network_client_1.NetworkClient, {
            apiKey: this.apiKey,
            apiSecret: this.apiSecret,
            httpsAgent: this.httpsAgent,
            retryConfig: this.retryConfig,
            authConfig: this.authConfig,
        });
    }
    get account() {
        return getClient(defender_sdk_account_client_1.AccountClient, {
            apiKey: this.apiKey,
            apiSecret: this.apiSecret,
            httpsAgent: this.httpsAgent,
            retryConfig: this.retryConfig,
            authConfig: this.authConfig,
        });
    }
    get approvalProcess() {
        return getClient(defender_sdk_approval_process_client_1.ApprovalProcessClient, { apiKey: this.apiKey, apiSecret: this.apiSecret });
    }
    get monitor() {
        return getClient(defender_sdk_monitor_client_1.MonitorClient, {
            apiKey: this.apiKey,
            apiSecret: this.apiSecret,
            httpsAgent: this.httpsAgent,
            retryConfig: this.retryConfig,
            authConfig: this.authConfig,
        });
    }
    get action() {
        return getClient(defender_sdk_action_client_1.ActionClient, {
            apiKey: this.apiKey,
            apiSecret: this.apiSecret,
            httpsAgent: this.httpsAgent,
            retryConfig: this.retryConfig,
            authConfig: this.authConfig,
        });
    }
    get relay() {
        return getClient(defender_sdk_relay_client_1.RelayClient, {
            apiKey: this.apiKey,
            apiSecret: this.apiSecret,
            httpsAgent: this.httpsAgent,
            retryConfig: this.retryConfig,
            authConfig: this.authConfig,
        });
    }
    get relayGroup() {
        return getClient(defender_sdk_relay_group_client_1.RelayGroupClient, {
            apiKey: this.apiKey,
            apiSecret: this.apiSecret,
            httpsAgent: this.httpsAgent,
            retryConfig: this.retryConfig,
            authConfig: this.authConfig,
        });
    }
    get proposal() {
        return getClient(defender_sdk_proposal_client_1.ProposalClient, {
            apiKey: this.apiKey,
            apiSecret: this.apiSecret,
            httpsAgent: this.httpsAgent,
            retryConfig: this.retryConfig,
            authConfig: this.authConfig,
        });
    }
    get deploy() {
        return getClient(defender_sdk_deploy_client_1.DeployClient, {
            apiKey: this.apiKey,
            apiSecret: this.apiSecret,
            httpsAgent: this.httpsAgent,
            retryConfig: this.retryConfig,
            authConfig: this.authConfig,
        });
    }
    get notificationChannel() {
        return getClient(defender_sdk_notification_channel_client_1.NotificationChannelClient, {
            apiKey: this.apiKey,
            apiSecret: this.apiSecret,
            httpsAgent: this.httpsAgent,
            retryConfig: this.retryConfig,
            authConfig: this.authConfig,
        });
    }
    get relaySigner() {
        return getClient(defender_sdk_relay_signer_client_1.Relayer, {
            httpsAgent: this.httpsAgent,
            retryConfig: this.retryConfig,
            authConfig: this.authConfig,
            ...(this.actionCredentials ? { credentials: this.actionCredentials } : undefined),
            ...(this.actionRelayerArn ? { relayerARN: this.actionRelayerArn } : undefined),
            ...(this.relayerApiKey ? { apiKey: this.relayerApiKey } : undefined),
            ...(this.relayerApiSecret ? { apiSecret: this.relayerApiSecret } : undefined),
        });
    }
    get addressBook() {
        return getClient(defender_sdk_address_book_client_1.AddressBookClient, {
            apiKey: this.apiKey,
            apiSecret: this.apiSecret,
            httpsAgent: this.httpsAgent,
            retryConfig: this.retryConfig,
            authConfig: this.authConfig,
        });
    }
    get keyValueStore() {
        return getClient(defender_sdk_key_value_store_client_1.KeyValueStoreClient, {
            apiKey: this.apiKey,
            apiSecret: this.apiSecret,
            httpsAgent: this.httpsAgent,
            retryConfig: this.retryConfig,
            authConfig: this.authConfig,
            ...(this.actionCredentials ? { credentials: this.actionCredentials } : undefined),
            ...(this.actionKVStoreArn ? { kvstoreARN: this.actionKVStoreArn } : undefined),
        });
    }
    static localKVStoreClient(params) {
        if (!params.path) {
            throw new Error(`Must provide a path for local key-value store`);
        }
        return new defender_sdk_key_value_store_client_1.KeyValueStoreClient(params);
    }
}
exports.Defender = Defender;
