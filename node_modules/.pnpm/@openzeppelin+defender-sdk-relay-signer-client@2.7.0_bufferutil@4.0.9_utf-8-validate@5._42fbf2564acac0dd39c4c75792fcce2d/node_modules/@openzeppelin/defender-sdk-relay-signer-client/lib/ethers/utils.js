"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isRelayerGroup = exports.isRelayer = exports.isLegacyTx = exports.isEIP1559Tx = exports.validatePayload = exports.isApiCredentials = exports.isActionCredentials = void 0;
function isActionCredentials(credentials) {
    const actionCredentials = credentials;
    return !!actionCredentials.credentials;
}
exports.isActionCredentials = isActionCredentials;
function isApiCredentials(credentials) {
    const apiCredentials = credentials;
    return !!apiCredentials.apiKey && !!apiCredentials.apiSecret;
}
exports.isApiCredentials = isApiCredentials;
function validatePayload(payload) {
    if (isEIP1559Tx(payload) &&
        BigInt(payload.maxFeePerGas) < BigInt(payload.maxPriorityFeePerGas)) {
        throw new Error('maxFeePerGas should be greater or equal to maxPriorityFeePerGas');
    }
    if (payload.validUntil && new Date(payload.validUntil).getTime() < new Date().getTime()) {
        throw new Error('The validUntil time cannot be in the past');
    }
    if (!payload.to && !payload.data) {
        throw new Error('Both txs `to` and `data` fields are missing. At least one of them has to be set.');
    }
    return payload;
}
exports.validatePayload = validatePayload;
// If a tx-like object is representing a EIP1559 transaction (type 2)
function isEIP1559Tx(tx) {
    return 'maxPriorityFeePerGas' in tx && 'maxFeePerGas' in tx;
}
exports.isEIP1559Tx = isEIP1559Tx;
// If a tx-like object is representing a legacy transaction (type 0)
function isLegacyTx(tx) {
    // Consider that an EIP1559 tx may have `gasPrice` after
    // https://github.com/OpenZeppelin/defender/pull/2838
    // that's why the !isEIP1559Tx check
    return 'gasPrice' in tx && !isEIP1559Tx(tx);
}
exports.isLegacyTx = isLegacyTx;
function isRelayer(params) {
    return typeof params === 'object' && !!params.getRelayer;
}
exports.isRelayer = isRelayer;
function isRelayerGroup(relayerOrRelayerGroup) {
    if ('relayerGroupId' in relayerOrRelayerGroup) {
        return true;
    }
    return false;
}
exports.isRelayerGroup = isRelayerGroup;
