import { EthersVersion, RelayerParams } from '../models/relayer';
import { JsonRpcProvider, JsonRpcResult, Network, JsonRpcSigner, JsonRpcPayload } from 'ethers';
export type DefenderRelayProviderOptions = {
    ethersVersion: EthersVersion;
};
export declare class DefenderRelayProvider extends JsonRpcProvider {
    readonly credentials: RelayerParams;
    private relayer;
    private pendingNetwork;
    constructor(credentials: RelayerParams);
    _detectNetwork(): Promise<Network>;
    detectNetwork(): Promise<Network>;
    _send(payload: JsonRpcPayload | JsonRpcPayload[]): Promise<JsonRpcResult[]>;
    send(method: string, params: Array<any>): Promise<any>;
    getSigner(address?: number | string): Promise<JsonRpcSigner>;
}
//# sourceMappingURL=provider.d.ts.map