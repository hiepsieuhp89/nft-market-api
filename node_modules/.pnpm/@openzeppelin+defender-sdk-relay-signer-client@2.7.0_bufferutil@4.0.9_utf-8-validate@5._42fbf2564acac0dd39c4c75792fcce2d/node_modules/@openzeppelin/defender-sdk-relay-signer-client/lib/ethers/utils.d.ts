import { ApiRelayerParams, ActionRelayerParams, RelayerGetResponse, RelayerGroupResponse } from '../models/relayer';
import { RelayerTransactionPayload } from '../models/transactions';
import { Relayer } from '../relayer';
export declare function isActionCredentials(credentials: ActionRelayerParams | ApiRelayerParams): credentials is ActionRelayerParams;
export declare function isApiCredentials(credentials: ActionRelayerParams | ApiRelayerParams): credentials is ApiRelayerParams;
export declare function validatePayload(payload: RelayerTransactionPayload): import("../models/transactions").SendBaseTransactionRequest;
export declare function isEIP1559Tx<TransactionLikeType extends object>(tx: TransactionLikeType): tx is TransactionLikeType & {
    maxPriorityFeePerGas: NonNullable<unknown>;
    maxFeePerGas: NonNullable<unknown>;
};
export declare function isLegacyTx<TransactionLikeType extends object>(tx: TransactionLikeType): tx is TransactionLikeType & {
    gasPrice: NonNullable<unknown>;
};
export declare function isRelayer(params: any): params is Relayer;
export declare function isRelayerGroup(relayerOrRelayerGroup: RelayerGetResponse | RelayerGroupResponse): relayerOrRelayerGroup is RelayerGroupResponse;
//# sourceMappingURL=utils.d.ts.map