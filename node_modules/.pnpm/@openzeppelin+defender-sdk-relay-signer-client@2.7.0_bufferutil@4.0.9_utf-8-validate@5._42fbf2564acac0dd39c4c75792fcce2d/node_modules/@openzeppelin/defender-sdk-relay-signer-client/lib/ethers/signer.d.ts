import { JsonRpcProvider, TransactionRequest, TransactionResponse, TypedDataDomain, TypedDataField, BytesLike, TransactionLike, JsonRpcSigner } from 'ethers';
import { Relayer } from '../relayer';
import { PrivateTransactionMode, Speed } from '../models/transactions';
import { EthersVersion, RelayerParams } from '../models/relayer';
export type Deferrable<T> = {
    [K in keyof T]: T[K] | Promise<T[K]>;
};
type GasOptions = Pick<TransactionLike<string>, 'gasPrice' | 'maxFeePerGas' | 'maxPriorityFeePerGas'>;
export type DefenderTransactionRequest = TransactionLike<string> & Partial<{
    speed: Speed;
    validUntil: Date | string;
    isPrivate?: boolean;
    privateMode?: PrivateTransactionMode;
}>;
export type DefenderRelaySignerOptions = Partial<GasOptions & {
    speed: Speed;
    validForSeconds: number;
    ethersVersion?: EthersVersion;
}>;
export declare class DefenderRelaySigner extends JsonRpcSigner {
    readonly relayerCredentials: RelayerParams | Relayer;
    readonly options: DefenderRelaySignerOptions;
    private readonly relayer;
    constructor(relayerCredentials: RelayerParams | Relayer, provider: JsonRpcProvider, address: string, options?: DefenderRelaySignerOptions);
    getAddress(): Promise<string>;
    signMessage(message: string | BytesLike): Promise<string>;
    signTransaction(transaction: TransactionRequest): Promise<string>;
    connect(provider: JsonRpcProvider): DefenderRelaySigner;
    signTypedData(domain: TypedDataDomain, types: Record<string, TypedDataField[]>, value: Record<string, any>): Promise<string>;
    sendTransaction(transaction: DefenderTransactionRequest): Promise<TransactionResponse>;
    populateTransaction(transaction: DefenderTransactionRequest): Promise<DefenderTransactionRequest>;
    checkTransaction(transaction: Deferrable<DefenderTransactionRequest>): Deferrable<DefenderTransactionRequest>;
    /**
     * Signs the typed data value with types data structure for domain using the EIP-712 specification.
     * https://eips.ethereum.org/EIPS/eip-712
     *
     * @param domain EIP712Domain containing name, version, chainId, verifyingContract and salt. All optional
     * @param types set of all types encompassed by struct
     * @param value typed data to sign matching provided types
     * @returns typed data signature
     */
    _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string>;
}
export {};
//# sourceMappingURL=signer.d.ts.map