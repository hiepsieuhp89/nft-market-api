import { Relayer } from '../relayer';
import { BigUInt, RelayerParams } from '../models/relayer';
import { Speed } from '../models/transactions';
import { EthExecutionAPI, JsonRpcPayload, JsonRpcRequest, JsonRpcResponse, JsonRpcResponseWithResult, JsonRpcResult, LegacySendAsyncProvider, SimpleProvider } from 'web3';
export type DefenderRelaySenderOptions = Partial<{
    gasPrice: BigUInt;
    maxFeePerGas: BigUInt;
    maxPriorityFeePerGas: BigUInt;
    speed: Speed;
    validForSeconds: number;
}>;
export declare class DefenderRelaySenderProvider implements LegacySendAsyncProvider {
    protected base: SimpleProvider<EthExecutionAPI>;
    protected options: DefenderRelaySenderOptions;
    protected relayer: Relayer;
    protected id: number;
    protected txHashToId: Map<string, string>;
    private address;
    constructor(base: SimpleProvider<EthExecutionAPI>, relayerCredentials: RelayerParams | Relayer, options?: DefenderRelaySenderOptions);
    get connected(): boolean | undefined;
    getTransactionId(hash: string): string | undefined;
    protected getAddress(): Promise<string>;
    request(payload: JsonRpcRequest): Promise<JsonRpcResponseWithResult<any> | unknown>;
    protected _getAccounts(params: any[]): Promise<string[]>;
    protected _sendTransaction(params: any[]): Promise<string>;
    protected _signMessage(params: any[]): Promise<string>;
    sendAsync<R = JsonRpcResult, P = unknown>(payload: JsonRpcPayload<P>): Promise<JsonRpcResponse<R>>;
    protected _delegateToProvider(provider: any): void;
}
//# sourceMappingURL=sender.d.ts.map