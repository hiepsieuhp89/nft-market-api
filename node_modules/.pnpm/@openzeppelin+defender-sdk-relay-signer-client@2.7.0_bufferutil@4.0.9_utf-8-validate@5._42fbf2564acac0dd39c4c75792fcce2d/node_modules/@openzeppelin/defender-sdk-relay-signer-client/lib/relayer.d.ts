import { IRelayer, RelayerGetResponse, RelayerGroupResponse, RelayerGroupStatus, RelayerParams, RelayerStatus } from './models/relayer';
import { JsonRpcResponse, SignMessagePayload, SignTypedDataPayload, SignedMessagePayload } from './models/rpc';
import { ListTransactionsRequest, PaginatedTransactionResponse, RelayerTransaction, RelayerTransactionPayload, TransactionDeleteResponse } from './models/transactions';
import { DefenderRelayProvider, DefenderRelayProviderOptions, DefenderRelaySigner, DefenderRelaySignerOptions } from './ethers';
import { JsonRpcProvider } from 'ethers';
import { DefenderRelayProviderV5 } from './ethers/provider-v5';
import { DefenderRelaySignerOptionsV5, DefenderRelaySignerV5 } from './ethers/signer-v5';
import { Provider } from '@ethersproject/abstract-provider';
type ProviderType<T extends DefenderRelayProviderOptions> = T['ethersVersion'] extends 'v6' ? DefenderRelayProvider : DefenderRelayProviderV5;
type SignerType<T extends DefenderRelaySignerOptionsV5 | DefenderRelaySignerOptions> = T['ethersVersion'] extends 'v6' ? DefenderRelaySigner : DefenderRelaySignerV5;
export declare class Relayer implements IRelayer {
    private relayer;
    private credentials;
    private isEthersV5Provider;
    private isEthersV5ProviderOptions;
    constructor(credentials: RelayerParams);
    getRelayer(): Promise<RelayerGetResponse | RelayerGroupResponse>;
    getRelayerStatus(): Promise<RelayerStatus | RelayerGroupStatus>;
    getProvider<T extends DefenderRelayProviderOptions>(options?: T): ProviderType<T>;
    getSigner<T extends DefenderRelaySignerOptionsV5 | DefenderRelaySignerOptions>(provider: Provider | JsonRpcProvider, options: T): Promise<SignerType<T>>;
    sign(payload: SignMessagePayload): Promise<SignedMessagePayload>;
    signTypedData(payload: SignTypedDataPayload): Promise<SignedMessagePayload>;
    sendTransaction(payload: RelayerTransactionPayload): Promise<RelayerTransaction>;
    replaceTransactionById(id: string, payload: RelayerTransactionPayload): Promise<RelayerTransaction>;
    replaceTransactionByNonce(nonce: number, payload: RelayerTransactionPayload): Promise<RelayerTransaction>;
    cancelTransactionById(id: string): Promise<TransactionDeleteResponse>;
    getTransaction(id: string): Promise<RelayerTransaction>;
    getTransactionByNonce(nonce: number): Promise<RelayerTransaction>;
    listTransactions(criteria?: ListTransactionsRequest): Promise<RelayerTransaction[] | PaginatedTransactionResponse>;
    call({ method, params }: {
        method: string;
        params: string[];
    }): Promise<JsonRpcResponse>;
}
export {};
//# sourceMappingURL=relayer.d.ts.map