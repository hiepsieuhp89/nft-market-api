import { BaseApiClient } from '@openzeppelin/defender-sdk-base-client';
import { ApiRelayerParams, IRelayer, RelayerGetResponse, RelayerGroupResponse, RelayerGroupStatus, RelayerStatus } from '../models/relayer';
import { ListTransactionsRequest, PaginatedTransactionResponse, RelayerTransaction, RelayerTransactionPayload, TransactionDeleteResponse } from '../models/transactions';
import { JsonRpcResponse, SignMessagePayload, SignTypedDataPayload, SignedMessagePayload } from '../models/rpc';
import { AuthType } from '@openzeppelin/defender-sdk-base-client/lib/api/auth-v2';
export declare const getApiUrl: () => string;
export declare class RelaySignerClient extends BaseApiClient implements IRelayer {
    private jsonRpcRequestNextId;
    constructor(params: ApiRelayerParams);
    protected getPoolId(): string;
    protected getPoolClientId(): string;
    protected getApiUrl(type?: AuthType): string;
    getRelayer(): Promise<RelayerGetResponse | RelayerGroupResponse>;
    getRelayerStatus(): Promise<RelayerStatus | RelayerGroupStatus>;
    sendTransaction(payload: RelayerTransactionPayload): Promise<RelayerTransaction>;
    replaceTransactionById(id: string, payload: RelayerTransactionPayload): Promise<RelayerTransaction>;
    replaceTransactionByNonce(nonce: number, payload: RelayerTransactionPayload): Promise<RelayerTransaction>;
    cancelTransactionById(id: string): Promise<TransactionDeleteResponse>;
    signTypedData(payload: SignTypedDataPayload): Promise<SignedMessagePayload>;
    sign(payload: SignMessagePayload): Promise<SignedMessagePayload>;
    getTransaction(id: string): Promise<RelayerTransaction>;
    getTransactionByNonce(nonce: number): Promise<RelayerTransaction>;
    listTransactions(criteria?: ListTransactionsRequest): Promise<PaginatedTransactionResponse>;
    call({ method, params }: {
        method: string;
        params: string[];
    }): Promise<JsonRpcResponse>;
}
//# sourceMappingURL=index.d.ts.map