"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelaySignerClient = exports.getApiUrl = void 0;
const defender_sdk_base_client_1 = require("@openzeppelin/defender-sdk-base-client");
const lodash_1 = require("lodash");
const getApiUrl = () => process.env.DEFENDER_API_URL || 'https://defender-api.openzeppelin.com/';
exports.getApiUrl = getApiUrl;
class RelaySignerClient extends defender_sdk_base_client_1.BaseApiClient {
    constructor(params) {
        super({
            ...params,
            authConfig: {
                type: 'relay',
                useCredentialsCaching: (0, lodash_1.isUndefined)(params?.authConfig?.useCredentialsCaching)
                    ? true
                    : params.authConfig.useCredentialsCaching,
            },
        });
        this.jsonRpcRequestNextId = 1;
    }
    getPoolId() {
        return process.env.DEFENDER_RELAY_SIGNER_POOL_ID || 'us-west-2_iLmIggsiy';
    }
    getPoolClientId() {
        return process.env.DEFENDER_RELAY_SIGNER_POOL_CLIENT_ID || '1bpd19lcr33qvg5cr3oi79rdap';
    }
    getApiUrl(type) {
        return (0, exports.getApiUrl)();
    }
    async getRelayer() {
        return this.apiCall(async (api) => {
            return (await api.get('/relayers/self'));
        });
    }
    async getRelayerStatus() {
        return this.apiCall(async (api) => {
            return (await api.get('/relayers/self/status'));
        });
    }
    async sendTransaction(payload) {
        return this.apiCall(async (api) => {
            return (await api.post('/relayers/self/txs', payload));
        });
    }
    async replaceTransactionById(id, payload) {
        return this.apiCall(async (api) => {
            return (await api.put(`/relayers/self/txs/${id}`, payload));
        });
    }
    async replaceTransactionByNonce(nonce, payload) {
        return this.apiCall(async (api) => {
            return (await api.put(`/relayers/self/txs/${nonce}`, payload));
        });
    }
    async cancelTransactionById(id) {
        return this.apiCall(async (api) => {
            return (await api.delete(`/relayers/self/txs/${id}`));
        });
    }
    async signTypedData(payload) {
        return this.apiCall(async (api) => {
            return (await api.post('/relayers/self/sign-typed-data', payload));
        });
    }
    async sign(payload) {
        return this.apiCall(async (api) => {
            return (await api.post('/relayers/self/sign', payload));
        });
    }
    async getTransaction(id) {
        return this.apiCall(async (api) => {
            return (await api.get(`/relayers/self/txs/${id}`));
        });
    }
    async getTransactionByNonce(nonce) {
        return this.apiCall(async (api) => {
            return (await api.get(`/relayers/self/txs/${nonce}?nonce=true`));
        });
    }
    async listTransactions(criteria) {
        return this.apiCall(async (api) => {
            return (await api.get(`/relayers/self/txs`, {
                params: { ...criteria, usePagination: true },
            }));
        });
    }
    async call({ method, params }) {
        return this.apiCall(async (api) => {
            return (await api.post(`/relayers/self/jsonrpc`, {
                method,
                params,
                jsonrpc: '2.0',
                id: this.jsonRpcRequestNextId++,
            }));
        });
    }
}
exports.RelaySignerClient = RelaySignerClient;
