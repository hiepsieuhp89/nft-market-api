"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Relayer = void 0;
const utils_1 = require("./ethers/utils");
const api_1 = require("./api");
const ethers_1 = require("./ethers");
const provider_v5_1 = require("./ethers/provider-v5");
const signer_v5_1 = require("./ethers/signer-v5");
class Relayer {
    isEthersV5Provider(_provider, ethersVersion) {
        // default to ethers v5
        if (!ethersVersion || ethersVersion === 'v5')
            return true;
        return false;
    }
    isEthersV5ProviderOptions(options) {
        // default to ethers v5
        if (!options?.ethersVersion || options.ethersVersion === 'v5')
            return true;
        return false;
    }
    constructor(credentials) {
        this.credentials = credentials;
        if ((0, utils_1.isActionCredentials)(credentials)) {
            // eslint-disable-next-line @typescript-eslint/no-var-requires
            const { ActionRelayer } = require('./action');
            this.relayer = new ActionRelayer(credentials);
        }
        else if ((0, utils_1.isApiCredentials)(credentials)) {
            this.relayer = new api_1.RelaySignerClient({
                ...credentials,
                authConfig: { ...credentials.authConfig, type: 'relay' },
            });
        }
        else {
            throw new Error(`Missing credentials for creating a Relayer instance. If you are running this code in an Action, make sure you pass the "credentials" parameter from the handler to the Relayer constructor. If you are running this on your own process, then pass an object with the "apiKey" and "apiSecret" generated by the relayer.`);
        }
    }
    getRelayer() {
        return this.relayer.getRelayer();
    }
    getRelayerStatus() {
        return this.relayer.getRelayerStatus();
    }
    getProvider(options) {
        if (!this.credentials)
            throw new Error(`Missing credentials for creating a DefenderRelayProvider instance.`);
        // defaults to ethers v5.
        if (!options || options.ethersVersion === 'v5')
            return new provider_v5_1.DefenderRelayProviderV5(this.credentials);
        return new ethers_1.DefenderRelayProvider(this.credentials);
    }
    async getSigner(provider, options) {
        if (!this.credentials)
            throw new Error(`Missing credentials for creating a DefenderRelaySigner instance.`);
        if (this.isEthersV5Provider(provider, options?.ethersVersion) && this.isEthersV5ProviderOptions(options)) {
            return new signer_v5_1.DefenderRelaySignerV5(this.credentials, provider, options);
        }
        if (!this.isEthersV5Provider(provider, options?.ethersVersion) && !this.isEthersV5ProviderOptions(options)) {
            const relayer = await this.relayer.getRelayer();
            if ('relayerGroupId' in relayer) {
                throw new Error('Relayer group is not supported for ethers v6.');
            }
            return new ethers_1.DefenderRelaySigner(this.credentials, provider, relayer.address, options);
        }
        throw new Error(`Invalid state, provider and options must be for the same ethers version.`);
    }
    sign(payload) {
        return this.relayer.sign(payload);
    }
    signTypedData(payload) {
        return this.relayer.signTypedData(payload);
    }
    sendTransaction(payload) {
        (0, utils_1.validatePayload)(payload);
        return this.relayer.sendTransaction(payload);
    }
    replaceTransactionById(id, payload) {
        (0, utils_1.validatePayload)(payload);
        return this.relayer.replaceTransactionById(id, payload);
    }
    replaceTransactionByNonce(nonce, payload) {
        (0, utils_1.validatePayload)(payload);
        return this.relayer.replaceTransactionByNonce(nonce, payload);
    }
    cancelTransactionById(id) {
        return this.relayer.cancelTransactionById(id);
    }
    getTransaction(id) {
        return this.relayer.getTransaction(id);
    }
    getTransactionByNonce(nonce) {
        return this.relayer.getTransactionByNonce(nonce);
    }
    listTransactions(criteria) {
        return this.relayer.listTransactions(criteria);
    }
    call({ method, params }) {
        return this.relayer.call({ method, params });
    }
}
exports.Relayer = Relayer;
