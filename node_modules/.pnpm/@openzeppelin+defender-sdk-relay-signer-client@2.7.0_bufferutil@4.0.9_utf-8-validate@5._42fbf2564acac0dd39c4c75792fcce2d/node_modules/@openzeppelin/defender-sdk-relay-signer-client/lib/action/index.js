"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActionRelayer = void 0;
const action_1 = require("@openzeppelin/defender-sdk-base-client/lib/action");
class ActionRelayer extends action_1.BaseActionClient {
    constructor(params) {
        super(params.credentials, params.relayerARN);
        this.jsonRpcRequestNextId = 0;
    }
    async sendTransaction(payload) {
        return this.execute({ action: 'send-tx', payload });
    }
    async replaceTransactionById(id, payload) {
        const txPayload = { ...payload, id };
        return this.execute({ action: 'replace-tx', payload: txPayload });
    }
    async replaceTransactionByNonce(nonce, payload) {
        const txPayload = { ...payload, nonce };
        return this.execute({ action: 'replace-tx', payload: txPayload });
    }
    async cancelTransactionById(id) {
        const payload = id;
        return this.execute({ action: 'cancel-tx', payload });
    }
    async getRelayer() {
        return this.execute({
            action: 'get-self',
        });
    }
    async getRelayerStatus() {
        return this.execute({
            action: 'get-self-status',
        });
    }
    async getTransaction(id) {
        return this.execute({
            action: 'get-tx',
            payload: id,
        });
    }
    async getTransactionByNonce(nonce) {
        return this.execute({
            action: 'get-tx',
            payload: String(nonce),
        });
    }
    async listTransactions(criteria) {
        return this.execute({
            action: 'list-txs',
            payload: criteria ?? {},
        });
    }
    async sign(payload) {
        return this.execute({
            action: 'sign',
            payload: payload,
        });
    }
    async signTypedData(payload) {
        return this.execute({
            action: 'signTypedData',
            payload: payload,
        });
    }
    async call({ method, params }) {
        return this.execute({
            action: 'json-rpc-query',
            payload: { method, params, jsonrpc: '2.0', id: this.jsonRpcRequestNextId++ },
        });
    }
}
exports.ActionRelayer = ActionRelayer;
