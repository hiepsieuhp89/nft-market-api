import { ActionRelayerParams, IRelayer, RelayerGetResponse, RelayerStatus } from '../models/relayer';
import { ListTransactionsRequest, RelayerTransaction, RelayerTransactionPayload, TransactionDeleteResponse } from '../models/transactions';
import { JsonRpcRequest, JsonRpcResponse, SignMessagePayload, SignTypedDataPayload, SignedMessagePayload } from '../models/rpc';
import { BaseActionClient } from '@openzeppelin/defender-sdk-base-client/lib/action';
export type SendTxRequest = {
    action: 'send-tx';
    payload: RelayerTransactionPayload;
};
export type GetTxRequest = {
    action: 'get-tx';
    payload: string;
};
export type SignRequest = {
    action: 'sign';
    payload: SignMessagePayload;
};
export type GetSelfRequest = {
    action: 'get-self';
};
export type JsonRpcCallRequest = {
    action: 'json-rpc-query';
    payload: JsonRpcRequest;
};
export type Request = SendTxRequest | GetTxRequest | SignRequest | GetSelfRequest | JsonRpcCallRequest;
export declare class ActionRelayer extends BaseActionClient implements IRelayer {
    private jsonRpcRequestNextId;
    constructor(params: ActionRelayerParams);
    sendTransaction(payload: RelayerTransactionPayload): Promise<RelayerTransaction>;
    replaceTransactionById(id: string, payload: RelayerTransactionPayload): Promise<RelayerTransaction>;
    replaceTransactionByNonce(nonce: number, payload: RelayerTransactionPayload): Promise<RelayerTransaction>;
    cancelTransactionById(id: string): Promise<TransactionDeleteResponse>;
    getRelayer(): Promise<RelayerGetResponse>;
    getRelayerStatus(): Promise<RelayerStatus>;
    getTransaction(id: string): Promise<RelayerTransaction>;
    getTransactionByNonce(nonce: number): Promise<RelayerTransaction>;
    listTransactions(criteria?: ListTransactionsRequest): Promise<RelayerTransaction[]>;
    sign(payload: SignMessagePayload): Promise<SignedMessagePayload>;
    signTypedData(payload: SignTypedDataPayload): Promise<SignedMessagePayload>;
    call({ method, params }: {
        method: string;
        params: string[];
    }): Promise<JsonRpcResponse>;
}
//# sourceMappingURL=index.d.ts.map