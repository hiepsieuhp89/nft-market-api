import { BaseApiClient } from '@openzeppelin/defender-sdk-base-client';
import { ExternalApiCreateProposalRequest as CreateProposalRequest, ProposalListPaginatedResponse } from '../models/proposal';
import { SimulationRequest as SimulationTransactionData, SimulationResponse } from '../models/simulation';
import { ProposalResponseWithUrl } from '../models/response';
import { Contract } from '../models/contract';
type CreateProposalParams = {
    proposal: CreateProposalRequest;
    simulate?: boolean;
    overrideSimulationOpts?: SimulationTransactionData;
};
export declare class ProposalClient extends BaseApiClient {
    protected getPoolId(): string;
    protected getPoolClientId(): string;
    protected getApiUrl(): string;
    addContract(contract: Contract): Promise<Contract>;
    deleteContract(id: string): Promise<string>;
    listContracts(params?: {
        includeAbi?: boolean;
    }): Promise<Contract[]>;
    getContract(contractId: string): Promise<Contract[]>;
    create({ proposal, simulate, overrideSimulationOpts, }: CreateProposalParams): Promise<ProposalResponseWithUrl>;
    private isListResponse;
    list(params?: {
        limit?: number;
        next?: string;
        includeArchived?: boolean;
    }): Promise<ProposalResponseWithUrl[] | ProposalListPaginatedResponse>;
    get(id: string): Promise<ProposalResponseWithUrl>;
    archive(id: string): Promise<ProposalResponseWithUrl>;
    unarchive(id: string): Promise<ProposalResponseWithUrl>;
    getSimulation(proposalId: string, params: {
        contractId: string;
    }): Promise<SimulationResponse>;
    simulate(proposalId: string, params: {
        contractId: string;
        transaction: SimulationTransactionData;
    }): Promise<SimulationResponse>;
}
export {};
//# sourceMappingURL=index.d.ts.map