"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProposalClient = void 0;
const defender_sdk_base_client_1 = require("@openzeppelin/defender-sdk-base-client");
const lodash_1 = require("lodash");
const ethers_1 = require("ethers");
const utils_1 = require("./utils");
class ProposalClient extends defender_sdk_base_client_1.BaseApiClient {
    getPoolId() {
        return process.env.DEFENDER_POOL_ID || 'us-west-2_94f3puJWv';
    }
    getPoolClientId() {
        return process.env.DEFENDER_POOL_CLIENT_ID || '40e58hbc7pktmnp9i26hh5nsav';
    }
    getApiUrl() {
        return process.env.DEFENDER_API_URL || 'https://defender-api.openzeppelin.com/';
    }
    async addContract(contract) {
        return this.apiCall(async (api) => {
            return (await api.put('/contracts', contract));
        });
    }
    async deleteContract(id) {
        return this.apiCall(async (api) => {
            return (await api.delete(`/contracts/${id}`));
        });
    }
    async listContracts(params = {}) {
        return this.apiCall(async (api) => {
            return (await api.get('/contracts', { params }));
        });
    }
    async getContract(contractId) {
        return this.apiCall(async (api) => {
            return (await api.get(`/contracts/${contractId}`));
        });
    }
    // added separate from CreateProposalRequest type as the `simulate` boolean is contained within defender-sdk
    async create({ proposal, simulate, overrideSimulationOpts, }) {
        return this.apiCall(async (api) => {
            let simulation = undefined;
            let simulationData = '0x';
            const isBatchProposal = (contract) => (0, lodash_1.isArray)(contract);
            // handle simulation checks before creating proposal
            if (simulate) {
                // we do not support simulating batch proposals from the client.
                if (isBatchProposal(proposal.contract)) {
                    throw new Error('Simulating a batch proposal is currently not supported from the API. Use the Defender UI to manually trigger a simulation.');
                }
                const overrideData = overrideSimulationOpts?.transactionData.data;
                simulationData = overrideData ?? '0x';
                // only check if we haven't overridden the simulation data property
                if (!overrideData) {
                    // Check if ABI is provided so we can encode the function
                    if (!proposal.contract.abi) {
                        // no ABI found, request user to pass in `data` in overrideSimulationOpts
                        throw new Error('Simulation requested without providing ABI. Please provide the contract ABI or use the `overrideSimulationOpts` to provide the data property directly.');
                    }
                    const contractInterface = new ethers_1.Interface(proposal.contract.abi);
                    // this is defensive and should never happen since createProposal schema validation will fail without this property defined.
                    if (!proposal.functionInterface) {
                        // no function selected, request user to pass in `data` in overrideSimulationOpts
                        throw new Error('Simulation requested without providing function interface. Please provide the function interface or use the `overrideSimulationOpts` to provide the data property directly.');
                    }
                    simulationData = contractInterface.encodeFunctionData(proposal.functionInterface.name, proposal.functionInputs);
                }
            }
            // create proposal
            const response = (await api.post('/proposals', proposal));
            // create simulation
            if (simulate && !isBatchProposal(proposal.contract)) {
                try {
                    simulation = await this.simulate(response.proposalId, {
                        contractId: response.contractId,
                        transaction: {
                            transactionData: {
                                from: proposal.via,
                                to: proposal.contract.address,
                                data: simulationData,
                                value: proposal.metadata?.sendValue ?? '0',
                                ...overrideSimulationOpts?.transactionData,
                            },
                            blockNumber: overrideSimulationOpts?.blockNumber,
                        },
                    });
                }
                catch (e) {
                    // simply log so we don't block createProposal response
                    console.warn('Simulation Failed:', e);
                }
            }
            return { ...response, url: (0, utils_1.getProposalUrl)(response), simulation };
        });
    }
    isListResponse(response) {
        return Array.isArray(response);
    }
    async list(params = {}) {
        return this.apiCall(async (api) => {
            const response = (await api.get('/proposals', { params }));
            if (this.isListResponse(response)) {
                return response.map((proposal) => ({ ...proposal, url: (0, utils_1.getProposalUrl)(proposal) }));
            }
            return response;
        });
    }
    async get(id) {
        return this.apiCall(async (api) => {
            const response = (await api.get(`/proposals/details/${id}`));
            return { ...response, url: (0, utils_1.getProposalUrl)(response) };
        });
    }
    async archive(id) {
        return this.apiCall(async (api) => {
            const response = (await api.put(`proposals/archive/${id}`));
            return { ...response, url: (0, utils_1.getProposalUrl)(response) };
        });
    }
    async unarchive(id) {
        return this.apiCall(async (api) => {
            const response = (await api.put(`/proposals/unarchive/${id}`));
            return { ...response, url: (0, utils_1.getProposalUrl)(response) };
        });
    }
    async getSimulation(proposalId, params) {
        return this.apiCall(async (api) => {
            const response = (await api.get(`/contracts/${params.contractId}/proposals/${proposalId}/simulation`));
            return response;
        });
    }
    async simulate(proposalId, params) {
        return this.apiCall(async (api) => {
            const response = (await api.post(`/contracts/${params.contractId}/proposals/${proposalId}/simulate`, params.transaction));
            return response;
        });
    }
}
exports.ProposalClient = ProposalClient;
