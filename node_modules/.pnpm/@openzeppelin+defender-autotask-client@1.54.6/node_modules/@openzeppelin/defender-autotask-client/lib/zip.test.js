"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jszip_1 = __importDefault(require("jszip"));
const zip_1 = require("./zip");
const path_1 = require("path");
describe('zip', () => {
    describe('zipSources', () => {
        it('zips sources', async function () {
            const zip = await (0, zip_1.zipSources)({
                'index.js': 'exports.handler = () => {};',
                'data.json': '{ "value": 42 }',
                'subfolder/nested.json': '{ "nested": true }',
            });
            await expectZip(zip);
        });
        it('validates index.js', async function () {
            expect(() => (0, zip_1.zipSources)({ 'other.js': 'exports.handler = () => {};' })).rejects.toThrowError(/entrypoint/);
        });
    });
    describe('zipFolder', () => {
        it('zips folder', async function () {
            const zip = await (0, zip_1.zipFolder)((0, path_1.resolve)(__dirname, '../fixtures/valid'));
            await expectZip(zip);
        });
        it('validates index.js', async function () {
            expect(() => (0, zip_1.zipFolder)((0, path_1.resolve)(__dirname, '../fixtures/invalid'))).rejects.toThrowError(/entrypoint/);
        });
    });
});
async function expectZip(zipContent) {
    const zip = new jszip_1.default();
    await zip.loadAsync(Buffer.from(zipContent, 'base64'));
    expect(Object.keys(zip.files).sort()).toEqual(['data.json', 'index.js', 'subfolder/', 'subfolder/nested.json']);
    console.log(await zip.file('index.js')?.async('text'));
    expect(await zip.file('index.js')?.async('text')).toEqual('exports.handler = () => {};');
    expect(await zip.file('data.json')?.async('text')).toEqual('{ "value": 42 }');
    expect(await zip.file('subfolder/nested.json')?.async('text')).toEqual('{ "nested": true }');
}
