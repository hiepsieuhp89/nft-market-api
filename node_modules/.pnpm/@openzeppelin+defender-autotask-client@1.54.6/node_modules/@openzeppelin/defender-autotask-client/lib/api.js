"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutotaskClient = void 0;
const crypto_1 = require("crypto");
const defender_base_client_1 = require("@openzeppelin/defender-base-client");
const zip_1 = require("./zip");
class AutotaskClient extends defender_base_client_1.BaseApiClient {
    getPoolId() {
        return process.env.DEFENDER_AUTOTASK_POOL_ID || 'us-west-2_94f3puJWv';
    }
    getPoolClientId() {
        return process.env.DEFENDER_AUTOTASK_POOL_CLIENT_ID || '40e58hbc7pktmnp9i26hh5nsav';
    }
    getApiUrl(v = 'v1') {
        if (v === 'v2') {
            return process.env.DEFENDER_API_V2_URL || 'https://defender-api.openzeppelin.com/v2/';
        }
        return process.env.DEFENDER_AUTOTASK_API_URL || 'https://defender-api.openzeppelin.com/autotask/';
    }
    async list() {
        return this.apiCall(async (api) => {
            return await api.get(`/autotasks`);
        });
    }
    async get(autotaskId) {
        return this.apiCall(async (api) => {
            return await api.get(`/autotasks/${autotaskId}`);
        });
    }
    async delete(autotaskId) {
        return this.apiCall(async (api) => {
            return await api.delete(`/autotasks/${autotaskId}`);
        });
    }
    async create(autotask) {
        return this.apiCall(async (api) => {
            return await api.post(`/autotasks`, autotask);
        });
    }
    async update(autotask) {
        return this.apiCall(async (api) => {
            return await api.put(`/autotasks/`, autotask);
        });
    }
    getEncodedZippedCodeFromBuffer(code) {
        return code.toString('base64');
    }
    async getEncodedZippedCodeFromSources(code) {
        return await (0, zip_1.zipSources)(code);
    }
    async getEncodedZippedCodeFromFolder(code) {
        return await (0, zip_1.zipFolder)(code);
    }
    async updateCodeFromZip(autotaskId, zippedCode) {
        const encodedZippedCode = this.getEncodedZippedCodeFromBuffer(zippedCode);
        return this.updateCode(autotaskId, encodedZippedCode);
    }
    async updateCodeFromSources(autotaskId, sources) {
        const encodedZippedCode = await this.getEncodedZippedCodeFromSources(sources);
        return this.updateCode(autotaskId, encodedZippedCode);
    }
    async updateCodeFromFolder(autotaskId, path) {
        const encodedZippedCode = await this.getEncodedZippedCodeFromFolder(path);
        return this.updateCode(autotaskId, encodedZippedCode);
    }
    async listAutotaskRuns(autotaskId, next, status) {
        if (next && !status && (next === 'success' || next === 'error' || next === 'pending' || next === 'throttle')) {
            status = next;
            next = undefined;
        }
        return this.apiCall(async (api) => {
            return api.get(`/autotasks/${autotaskId}/runs`, { params: { next, status } });
        });
    }
    async getAutotaskRun(autotaskRunId) {
        return this.apiCall(async (api) => {
            return await api.get(`/autotasks/runs/${autotaskRunId}`);
        });
    }
    async runAutotask(autotaskId, data) {
        return this.apiCall(async (api) => {
            return await api.post(`/autotasks/${autotaskId}/runs/manual`, data);
        });
    }
    getCodeDigest(encodedZippedCode) {
        const binary = Buffer.from(encodedZippedCode, 'base64');
        return (0, crypto_1.createHash)('SHA256').update(binary).end().digest('base64');
    }
    async updateCode(autotaskId, encodedZippedCode) {
        return this.apiCall(async (api) => {
            return await api.put(`/autotasks/${autotaskId}/code`, { encodedZippedCode });
        });
    }
    async updateEnvironmentVariables(autotaskId, variables) {
        return this.apiCall(async (api) => {
            return await api.put(`/autotasks/${autotaskId}/environment`, { variables });
        });
    }
    async getEnvironmentVariables(autotaskId) {
        return this.apiCall(async (api) => {
            return await api.get(`/autotasks/${autotaskId}/environment`);
        });
    }
    async createSecrets(data) {
        return this.apiCall(async (api) => {
            return await api.post(`/secrets`, data);
        });
    }
    async listSecrets() {
        return this.apiCall(async (api) => {
            return await api.get(`/secrets`);
        });
    }
}
exports.AutotaskClient = AutotaskClient;
