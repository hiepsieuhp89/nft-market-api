/// <reference types="node" />
import { BaseApiClient, ApiVersion } from '@openzeppelin/defender-base-client';
import { CreateAutotaskRequest, UpdateAutotaskRequest, GetSecretsResponse, SaveSecretsRequest, EnvironmentVariables } from './models/autotask';
import { AutotaskRunBase, AutotaskRunListResponse, AutotaskRunResponse, AutotaskRunStatus } from './models/autotask-run.res';
import { AutotaskDeleteResponse, AutotaskListResponse, AutotaskResponse } from './models/response';
type SourceFiles = {
    'index.js': string;
    [name: string]: string;
};
export declare class AutotaskClient extends BaseApiClient {
    protected getPoolId(): string;
    protected getPoolClientId(): string;
    protected getApiUrl(v?: ApiVersion): string;
    list(): Promise<AutotaskListResponse>;
    get(autotaskId: string): Promise<AutotaskResponse>;
    delete(autotaskId: string): Promise<AutotaskDeleteResponse>;
    create(autotask: CreateAutotaskRequest): Promise<AutotaskResponse>;
    update(autotask: UpdateAutotaskRequest): Promise<AutotaskResponse>;
    getEncodedZippedCodeFromBuffer(code: Buffer): string;
    getEncodedZippedCodeFromSources(code: SourceFiles): Promise<string>;
    getEncodedZippedCodeFromFolder(code: string): Promise<string>;
    updateCodeFromZip(autotaskId: string, zippedCode: Buffer): Promise<void>;
    updateCodeFromSources(autotaskId: string, sources: SourceFiles): Promise<void>;
    updateCodeFromFolder(autotaskId: string, path: string): Promise<void>;
    listAutotaskRuns(autotaskId: string, next?: string, status?: AutotaskRunStatus | undefined): Promise<AutotaskRunListResponse>;
    getAutotaskRun(autotaskRunId: string): Promise<AutotaskRunResponse>;
    runAutotask(autotaskId: string, data: {
        [key: string]: any;
    }): Promise<AutotaskRunBase>;
    getCodeDigest(encodedZippedCode: string): string;
    private updateCode;
    updateEnvironmentVariables(autotaskId: string, variables: EnvironmentVariables): Promise<EnvironmentVariables>;
    getEnvironmentVariables(autotaskId: string): Promise<EnvironmentVariables>;
    createSecrets(data: SaveSecretsRequest): Promise<GetSecretsResponse>;
    listSecrets(): Promise<GetSecretsResponse>;
}
export {};
//# sourceMappingURL=api.d.ts.map