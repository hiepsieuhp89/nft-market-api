"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelayClient = void 0;
const defender_sdk_base_client_1 = require("@openzeppelin/defender-sdk-base-client");
class RelayClient extends defender_sdk_base_client_1.BaseApiClient {
    getPoolId() {
        return process.env.DEFENDER_POOL_ID || 'us-west-2_94f3puJWv';
    }
    getPoolClientId() {
        return process.env.DEFENDER_POOL_CLIENT_ID || '40e58hbc7pktmnp9i26hh5nsav';
    }
    getApiUrl() {
        return process.env.DEFENDER_API_URL || 'https://defender-api.openzeppelin.com/';
    }
    async get(id) {
        return this.apiCall(async (api) => {
            return await api.get(`/relayers/${id}`);
        });
    }
    async list() {
        return this.apiCall(async (api) => {
            return await api.get('/relayers/summary');
        });
    }
    async create(relayer) {
        return this.apiCall(async (api) => {
            return await api.post('/relayers', relayer);
        });
    }
    async update(id, relayerUpdateParams) {
        const currentRelayer = await this.get(id);
        if (relayerUpdateParams.policies) {
            const relayerPolicies = {
                ...currentRelayer.policies,
                ...relayerUpdateParams.policies,
            };
            const updatedRelayer = await this.updatePolicies(id, relayerPolicies);
            // if policies are the only update, return
            if (Object.keys(relayerUpdateParams).length === 1)
                return updatedRelayer;
        }
        return this.apiCall(async (api) => {
            return await api.put(`/relayers`, {
                ...currentRelayer,
                ...relayerUpdateParams,
            });
        });
    }
    async updatePolicies(id, relayerPolicies) {
        return this.apiCall(async (api) => {
            return await api.put(`/relayers/${id}`, relayerPolicies);
        });
    }
    async createKey(id, createKeyParams) {
        return this.apiCall(async (api) => {
            return await api.post(`/relayers/${id}/keys`, createKeyParams);
        });
    }
    async listKeys(id) {
        return this.apiCall(async (api) => {
            return await api.get(`/relayers/${id}/keys`);
        });
    }
    async deleteKey(id, keyId) {
        return this.apiCall(async (api) => {
            return await api.delete(`/relayers/${id}/keys/${keyId}`);
        });
    }
}
exports.RelayClient = RelayClient;
