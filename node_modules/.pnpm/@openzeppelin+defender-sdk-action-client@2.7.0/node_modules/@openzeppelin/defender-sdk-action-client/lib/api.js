"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActionClient = void 0;
const crypto_1 = require("crypto");
const defender_sdk_base_client_1 = require("@openzeppelin/defender-sdk-base-client");
const zip_1 = require("./zip");
const utils_1 = require("./utils");
class ActionClient extends defender_sdk_base_client_1.BaseApiClient {
    getPoolId() {
        return process.env.DEFENDER_POOL_ID || 'us-west-2_94f3puJWv';
    }
    getPoolClientId() {
        return process.env.DEFENDER_POOL_CLIENT_ID || '40e58hbc7pktmnp9i26hh5nsav';
    }
    getApiUrl() {
        return process.env.DEFENDER_API_URL || 'https://defender-api.openzeppelin.com/';
    }
    async list() {
        return this.apiCall(async (api) => {
            return await api.get(`/actions`);
        });
    }
    async get(id) {
        return this.apiCall(async (api) => {
            return await api.get(`/actions/${id}`);
        });
    }
    async delete(id) {
        return this.apiCall(async (api) => {
            return await api.delete(`/actions/${id}`);
        });
    }
    async create(action) {
        return this.apiCall(async (api) => {
            return await api.post(`/actions`, action);
        });
    }
    async update(action) {
        return this.apiCall(async (api) => {
            return await api.put(`/actions/`, action);
        });
    }
    getEncodedZippedCodeFromBuffer({ buffer }) {
        return buffer.toString('base64');
    }
    async getEncodedZippedCodeFromSources(sources) {
        return await (0, zip_1.zipSources)(sources);
    }
    async getEncodedZippedCodeFromFolder(path) {
        return await (0, zip_1.zipFolder)(path);
    }
    async updateCodeFromZip(id, { buffer }) {
        const encodedZippedCode = this.getEncodedZippedCodeFromBuffer({ buffer });
        return this.updateCode(id, { encodedZippedCode });
    }
    async updateCodeFromSources(id, { sources }) {
        const encodedZippedCode = await this.getEncodedZippedCodeFromSources(sources);
        return this.updateCode(id, { encodedZippedCode });
    }
    async updateCodeFromFolder(id, { path }) {
        const encodedZippedCode = await this.getEncodedZippedCodeFromFolder(path);
        return this.updateCode(id, { encodedZippedCode });
    }
    async listActionRuns(id, params) {
        // TODO: move to backend.
        const { next, status } = params;
        if (next && !status && (next === 'success' || next === 'error' || next === 'pending' || next === 'throttle')) {
            params = {
                status: next,
                next: undefined,
            };
        }
        return this.apiCall(async (api) => {
            return api.get(`/actions/${id}/runs`, { params });
        });
    }
    async getActionRun(id) {
        return this.apiCall(async (api) => {
            return await api.get(`/actions/runs/${id}`);
        });
    }
    async runAction(id, data) {
        return this.apiCall(async (api) => {
            return await api.post(`/actions/${id}/runs/manual`, data);
        });
    }
    getCodeDigest({ encodedZippedCode }) {
        const binary = Buffer.from(encodedZippedCode, 'base64');
        const hash = (0, crypto_1.createHash)('SHA256').update(binary);
        return hash.digest('base64');
    }
    async updateCode(id, { encodedZippedCode }) {
        return this.apiCall(async (api) => {
            return await api.put(`/actions/${id}/code`, { encodedZippedCode });
        });
    }
    async updateEnvironmentVariables(id, { variables }) {
        return this.apiCall(async (api) => {
            return await api.put(`/actions/${id}/environment`, { variables });
        });
    }
    async getEnvironmentVariables(id) {
        return this.apiCall(async (api) => {
            return await api.get(`/actions/${id}/environment`);
        });
    }
    async createSecrets(data) {
        return this.apiCall(async (api) => {
            return await api.post(`/secrets`, data);
        });
    }
    async listSecrets() {
        return this.apiCall(async (api) => {
            return await api.get(`/secrets`);
        });
    }
    tailLogsFor(actionId) {
        return (0, utils_1.tailLogsFor)(this, actionId);
    }
    validateId(id) {
        (0, utils_1.validateId)(id);
    }
    validatePath(path) {
        (0, utils_1.validatePath)(path);
    }
}
exports.ActionClient = ActionClient;
