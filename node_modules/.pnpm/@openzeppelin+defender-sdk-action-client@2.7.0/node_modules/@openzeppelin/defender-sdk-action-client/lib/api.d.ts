/// <reference types="node" />
import { BaseApiClient } from '@openzeppelin/defender-sdk-base-client';
import { CreateActionRequest, UpdateActionRequest, GetSecretsResponse, SaveSecretsRequest, EnvironmentVariables } from './models/action';
import { ActionRunBase, ActionRunListParams, ActionRunListResponse, ActionRunResponse } from './models/action-run.res';
import { ActionDeleteResponse, ActionListResponse, ActionResponse } from './models/response';
type SourceFiles = {
    'index.js': string;
    [name: string]: string;
};
export declare class ActionClient extends BaseApiClient {
    protected getPoolId(): string;
    protected getPoolClientId(): string;
    protected getApiUrl(): string;
    list(): Promise<ActionListResponse>;
    get(id: string): Promise<ActionResponse>;
    delete(id: string): Promise<ActionDeleteResponse>;
    create(action: CreateActionRequest): Promise<ActionResponse>;
    update(action: UpdateActionRequest): Promise<ActionResponse>;
    getEncodedZippedCodeFromBuffer({ buffer }: {
        buffer: Buffer;
    }): string;
    getEncodedZippedCodeFromSources(sources: SourceFiles): Promise<string>;
    getEncodedZippedCodeFromFolder(path: string): Promise<string>;
    updateCodeFromZip(id: string, { buffer }: {
        buffer: Buffer;
    }): Promise<void>;
    updateCodeFromSources(id: string, { sources }: {
        sources: SourceFiles;
    }): Promise<void>;
    updateCodeFromFolder(id: string, { path }: {
        path: string;
    }): Promise<void>;
    listActionRuns(id: string, params: ActionRunListParams): Promise<ActionRunListResponse>;
    getActionRun(id: string): Promise<ActionRunResponse>;
    runAction(id: string, data: {
        [key: string]: any;
    }): Promise<ActionRunBase>;
    getCodeDigest({ encodedZippedCode }: {
        encodedZippedCode: string;
    }): string;
    private updateCode;
    updateEnvironmentVariables(id: string, { variables }: {
        variables: EnvironmentVariables;
    }): Promise<EnvironmentVariables>;
    getEnvironmentVariables(id: string): Promise<EnvironmentVariables>;
    createSecrets(data: SaveSecretsRequest): Promise<GetSecretsResponse>;
    listSecrets(): Promise<GetSecretsResponse>;
    tailLogsFor(actionId: string): Promise<void>;
    validateId(id: string): void;
    validatePath(path: string): void;
}
export {};
//# sourceMappingURL=api.d.ts.map