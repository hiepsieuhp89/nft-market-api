"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VERSION = exports.KeyValueStoreClient = void 0;
const types_1 = require("./types");
class KeyValueStoreClient {
    constructor(params) {
        const defenderEnv = process.env.DEFENDER_ENV;
        if (defenderEnv === 'DEFENDER_ACTION_ENVIRONMENT') {
            if (!(0, types_1.isActionCreateParams)(params)) {
                throw new Error('Invalid create params for KeyValueStoreClient');
            }
            // eslint-disable-next-line @typescript-eslint/no-var-requires
            const { KeyValueStoreActionClient } = require('./action');
            this.implementation = new KeyValueStoreActionClient(params);
        }
        else if ((0, types_1.isLocalCreateParams)(params)) {
            // eslint-disable-next-line @typescript-eslint/no-var-requires
            const { KeyValueStoreLocalClient } = require('./local');
            this.implementation = new KeyValueStoreLocalClient(params);
        }
        else {
            throw new Error(`Invalid create params for KeyValueStoreClient`);
        }
    }
    async get(key) {
        return this.implementation.get(key);
    }
    async put(key, value) {
        if (typeof key !== 'string')
            throw new Error(`Key must be a string`);
        if (value && typeof value !== 'string')
            throw new Error(`Value must be a string`);
        if (key.length > 1024)
            throw new Error(`Key size cannot exceed 1024 characters`);
        if (value && value.length > 300 * 1024)
            throw new Error(`Value size cannot exceed 300 KB`);
        return this.implementation.put(key, value);
    }
    async del(key) {
        return this.implementation.del(key);
    }
}
exports.KeyValueStoreClient = KeyValueStoreClient;
// eslint-disable-next-line @typescript-eslint/no-var-requires
exports.VERSION = require('../package.json').version;
