import { BaseApiClient } from '@openzeppelin/defender-sdk-base-client';
import { ExternalCreateMonitorRequest, ExternalUpdateMonitorRequest as UpdateMonitorRequest } from '../models/monitor';
import { DeletedMonitorResponse, CreateMonitorResponse, ListMonitorResponse } from '../models/response';
import { BlockWatcher } from '../models/blockwatcher';
import { NotificationResponse } from '..';
import { CreateNotificationRequest, NotificationType, UpdateNotificationRequest } from '../models/notification';
export declare class MonitorClient extends BaseApiClient {
    protected getPoolId(): string;
    protected getPoolClientId(): string;
    protected getApiUrl(): string;
    list(): Promise<ListMonitorResponse>;
    create(params: ExternalCreateMonitorRequest): Promise<CreateMonitorResponse>;
    get(id: string): Promise<CreateMonitorResponse>;
    update(id: string, params: UpdateMonitorRequest): Promise<CreateMonitorResponse>;
    delete(id: string): Promise<DeletedMonitorResponse>;
    pause(id: string): Promise<ExternalCreateMonitorRequest>;
    unpause(id: string): Promise<ExternalCreateMonitorRequest>;
    listBlockwatchers(): Promise<BlockWatcher[]>;
    listTenantBlockwatchers(): Promise<BlockWatcher[]>;
    createNotificationChannel(notification: CreateNotificationRequest): Promise<NotificationResponse>;
    listNotificationChannels(): Promise<NotificationResponse[]>;
    deleteNotificationChannel(id: string, type: NotificationType): Promise<string>;
    getNotificationChannel(id: string, type: NotificationType): Promise<NotificationResponse>;
    updateNotificationChannel(id: string, notification: UpdateNotificationRequest): Promise<NotificationResponse>;
    getBlockwatcherIdByNetwork(network: string): Promise<BlockWatcher[]>;
    private normaliseABI;
    private constructBlockMonitor;
    private getNotifications;
    private constructMonitorRequest;
    private toCreateBlockMonitorRequest;
    private toCreateMonitorRequest;
}
//# sourceMappingURL=index.d.ts.map